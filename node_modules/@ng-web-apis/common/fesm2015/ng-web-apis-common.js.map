{"version":3,"file":"ng-web-apis-common.js","sources":["../../../libs/common/src/tokens/window.ts","../../../libs/common/src/tokens/animation-frame.ts","../../../libs/common/src/tokens/caches.ts","../../../libs/common/src/tokens/crypto.ts","../../../libs/common/src/tokens/css.ts","../../../libs/common/src/tokens/history.ts","../../../libs/common/src/tokens/local-storage.ts","../../../libs/common/src/tokens/location.ts","../../../libs/common/src/tokens/navigator.ts","../../../libs/common/src/tokens/media-devices.ts","../../../libs/common/src/tokens/network-information.ts","../../../libs/common/src/tokens/page-visibility.ts","../../../libs/common/src/tokens/performance.ts","../../../libs/common/src/tokens/screen.ts","../../../libs/common/src/tokens/session-storage.ts","../../../libs/common/src/tokens/speech-recognition.ts","../../../libs/common/src/tokens/speech-synthesis.ts","../../../libs/common/src/tokens/user-agent.ts","../../../libs/common/src/ng-web-apis-common.ts"],"sourcesContent":["import {DOCUMENT} from '@angular/common';\nimport {inject, InjectionToken} from '@angular/core';\n\nexport const WINDOW = new InjectionToken<Window>(\n    'An abstraction over global window object',\n    {\n        factory: () => {\n            const {defaultView} = inject(DOCUMENT);\n\n            if (!defaultView) {\n                throw new Error('Window is not available');\n            }\n\n            return defaultView;\n        },\n    },\n);\n","import {inject, InjectionToken} from '@angular/core';\nimport {Observable} from 'rxjs';\nimport {share} from 'rxjs/operators';\n\nimport {WINDOW} from './window';\n\nexport const ANIMATION_FRAME = new InjectionToken<Observable<DOMHighResTimeStamp>>(\n    'Shared Observable based on `window.requestAnimationFrame`',\n    {\n        factory: () => {\n            const {requestAnimationFrame, cancelAnimationFrame} = inject(WINDOW);\n            const animationFrame$ = new Observable<DOMHighResTimeStamp>(subscriber => {\n                let id = NaN;\n                const callback = (timestamp: DOMHighResTimeStamp) => {\n                    subscriber.next(timestamp);\n                    id = requestAnimationFrame(callback);\n                };\n\n                id = requestAnimationFrame(callback);\n\n                return () => {\n                    cancelAnimationFrame(id);\n                };\n            });\n\n            return animationFrame$.pipe(share());\n        },\n    },\n);\n","import {inject, InjectionToken} from '@angular/core';\n\nimport {WINDOW} from './window';\n\nexport const CACHES = new InjectionToken<CacheStorage>(\n    'An abstraction over window.caches object',\n    {\n        factory: () => inject(WINDOW).caches,\n    },\n);\n","import {inject, InjectionToken} from '@angular/core';\n\nimport {WINDOW} from './window';\n\nexport const CRYPTO = new InjectionToken<Crypto>(\n    'An abstraction over window.crypto object',\n    {\n        factory: () => inject(WINDOW).crypto,\n    },\n);\n","import {inject, InjectionToken} from '@angular/core';\n\nimport {WINDOW} from './window';\n\n/**\n * Use Window['CSS'], this is a workaround to support Angular 6+\n */\ninterface Css {\n    escape(ident: string): string;\n    supports(property: string, value: string): boolean;\n    supports(conditionText: string): boolean;\n}\n\nexport const CSS = new InjectionToken<Css>('An abstraction over window.CSS object', {\n    factory: () =>\n        (inject(WINDOW) as any).CSS || {\n            escape: v => v,\n            supports: () => false,\n        },\n});\n","import {inject, InjectionToken} from '@angular/core';\n\nimport {WINDOW} from './window';\n\nexport const HISTORY = new InjectionToken<History>(\n    'An abstraction over window.history object',\n    {\n        factory: () => inject(WINDOW).history,\n    },\n);\n","import {inject, InjectionToken} from '@angular/core';\n\nimport {WINDOW} from './window';\n\nexport const LOCAL_STORAGE = new InjectionToken<Storage>(\n    'An abstraction over window.localStorage object',\n    {\n        factory: () => inject(WINDOW).localStorage,\n    },\n);\n","import {inject, InjectionToken} from '@angular/core';\n\nimport {WINDOW} from './window';\n\nexport const LOCATION = new InjectionToken<Location>(\n    'An abstraction over window.location object',\n    {\n        factory: () => inject(WINDOW).location,\n    },\n);\n","import {inject, InjectionToken} from '@angular/core';\n\nimport {WINDOW} from './window';\n\nexport const NAVIGATOR = new InjectionToken<Navigator>(\n    'An abstraction over window.navigator object',\n    {\n        factory: () => inject(WINDOW).navigator,\n    },\n);\n","import {inject, InjectionToken} from '@angular/core';\n\nimport {NAVIGATOR} from './navigator';\n\nexport const MEDIA_DEVICES = new InjectionToken<MediaDevices>(\n    'An abstraction over window.navigator.mediaDevices object',\n    {\n        factory: () => inject(NAVIGATOR).mediaDevices,\n    },\n);\n","import {inject, InjectionToken} from '@angular/core';\n\nimport {NAVIGATOR} from './navigator';\n\nexport const NETWORK_INFORMATION = new InjectionToken<\n    // @ts-ignore\n    (typeof navigator)['connection'] | null\n>('An abstraction over window.navigator.connection object', {\n    // @ts-ignore\n    factory: () => inject(NAVIGATOR).connection || null,\n});\n","import {DOCUMENT} from '@angular/common';\nimport {inject, InjectionToken} from '@angular/core';\nimport {fromEvent, Observable} from 'rxjs';\nimport {distinctUntilChanged, map, shareReplay, startWith} from 'rxjs/operators';\n\nexport const PAGE_VISIBILITY = new InjectionToken<Observable<boolean>>(\n    'Shared Observable based on `document visibility changed`',\n    {\n        factory: () => {\n            const documentRef = inject(DOCUMENT);\n\n            return fromEvent(documentRef, 'visibilitychange').pipe(\n                startWith(0),\n                map(() => documentRef.visibilityState !== 'hidden'),\n                distinctUntilChanged(),\n                shareReplay({refCount: false, bufferSize: 1}),\n            );\n        },\n    },\n);\n","import {inject, InjectionToken} from '@angular/core';\n\nimport {WINDOW} from './window';\n\nexport const PERFORMANCE = new InjectionToken<Performance>(\n    'An abstraction over window.performance object',\n    {\n        factory: () => inject(WINDOW).performance,\n    },\n);\n","import {inject, InjectionToken} from '@angular/core';\n\nimport {WINDOW} from './window';\n\nexport const SCREEN = new InjectionToken<Screen>(\n    'An abstraction over window.screen object',\n    {\n        factory: () => inject(WINDOW).screen,\n    },\n);\n","import {inject, InjectionToken} from '@angular/core';\n\nimport {WINDOW} from './window';\n\nexport const SESSION_STORAGE = new InjectionToken<Storage>(\n    'An abstraction over window.sessionStorage object',\n    {\n        factory: () => inject(WINDOW).sessionStorage,\n    },\n);\n","import {inject, InjectionToken} from '@angular/core';\n\nimport {WINDOW} from './window';\n\nexport const SPEECH_RECOGNITION = new InjectionToken<\n    // @ts-ignore\n    (typeof window)['speechRecognition'] | null\n>('An abstraction over SpeechRecognition class', {\n    factory: () => {\n        const windowRef: any = inject(WINDOW);\n\n        return windowRef.speechRecognition || windowRef.webkitSpeechRecognition || null;\n    },\n});\n","import {inject, InjectionToken} from '@angular/core';\n\nimport {WINDOW} from './window';\n\nexport const SPEECH_SYNTHESIS = new InjectionToken<SpeechSynthesis>(\n    'An abstraction over window.speechSynthesis object',\n    {\n        factory: () => inject(WINDOW).speechSynthesis,\n    },\n);\n","import {inject, InjectionToken} from '@angular/core';\n\nimport {NAVIGATOR} from './navigator';\n\nexport const USER_AGENT = new InjectionToken<string>(\n    'An abstraction over window.navigator.userAgent object',\n    {\n        factory: () => inject(NAVIGATOR).userAgent,\n    },\n);\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":[],"mappings":"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"}