import { Attribute, Directive, ElementRef, Inject } from '@angular/core';
import { ResizeObserverService } from '../services/resize-observer.service';
import { RESIZE_OPTION_BOX, RESIZE_OPTION_BOX_DEFAULT } from '../tokens/resize-option-box';
import * as i0 from "@angular/core";
import * as i1 from "rxjs";
/**
 * @deprecated View Engine legacy
 * TODO: use arrow function for `useFactory` and delete this exported function in future major release
 */
// TODO switch to Attribute once https://github.com/angular/angular/issues/36479 is fixed
export function boxExtractor({ nativeElement, }) {
    const attribute = nativeElement.getAttribute('waResizeBox');
    return boxFactory(attribute);
}
/**
 * @deprecated View Engine legacy
 * TODO: use arrow function for `useFactory` and delete this exported function in future major release
 */
export function boxFactory(box) {
    return box || RESIZE_OPTION_BOX_DEFAULT;
}
export class ResizeObserverDirective {
    constructor(waResizeObserver, _box) {
        this.waResizeObserver = waResizeObserver;
    }
}
ResizeObserverDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: ResizeObserverDirective, deps: [{ token: ResizeObserverService }, { token: 'waResizeBox', attribute: true }], target: i0.ɵɵFactoryTarget.Directive });
ResizeObserverDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: ResizeObserverDirective, selector: "[waResizeObserver]", outputs: { waResizeObserver: "waResizeObserver" }, providers: [
        ResizeObserverService,
        {
            provide: RESIZE_OPTION_BOX,
            deps: [ElementRef],
            useFactory: boxExtractor,
        },
    ], ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: ResizeObserverDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[waResizeObserver]',
                    outputs: ['waResizeObserver'],
                    providers: [
                        ResizeObserverService,
                        {
                            provide: RESIZE_OPTION_BOX,
                            deps: [ElementRef],
                            useFactory: boxExtractor,
                        },
                    ],
                }]
        }], ctorParameters: function () { return [{ type: i1.Observable, decorators: [{
                    type: Inject,
                    args: [ResizeObserverService]
                }] }, { type: undefined, decorators: [{
                    type: Attribute,
                    args: ['waResizeBox']
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzaXplLW9ic2VydmVyLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2xpYnMvcmVzaXplLW9ic2VydmVyL3NyYy9kaXJlY3RpdmVzL3Jlc2l6ZS1vYnNlcnZlci5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLFNBQVMsRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUd2RSxPQUFPLEVBQUMscUJBQXFCLEVBQUMsTUFBTSxxQ0FBcUMsQ0FBQztBQUMxRSxPQUFPLEVBQUMsaUJBQWlCLEVBQUUseUJBQXlCLEVBQUMsTUFBTSw2QkFBNkIsQ0FBQzs7O0FBRXpGOzs7R0FHRztBQUNILHlGQUF5RjtBQUN6RixNQUFNLFVBQVUsWUFBWSxDQUFDLEVBQ3pCLGFBQWEsR0FDSztJQUNsQixNQUFNLFNBQVMsR0FBRyxhQUFhLENBQUMsWUFBWSxDQUN4QyxhQUFhLENBQ1ksQ0FBQztJQUU5QixPQUFPLFVBQVUsQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUNqQyxDQUFDO0FBRUQ7OztHQUdHO0FBQ0gsTUFBTSxVQUFVLFVBQVUsQ0FDdEIsR0FBb0M7SUFFcEMsT0FBTyxHQUFHLElBQUkseUJBQXlCLENBQUM7QUFDNUMsQ0FBQztBQWNELE1BQU0sT0FBTyx1QkFBdUI7SUFDaEMsWUFFYSxnQkFBbUQsRUFDbEMsSUFBOEI7UUFEL0MscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFtQztJQUU3RCxDQUFDOztxSEFMSyx1QkFBdUIsa0JBRXBCLHFCQUFxQixhQUVsQixhQUFhO3lHQUpuQix1QkFBdUIsZ0dBVHJCO1FBQ1AscUJBQXFCO1FBQ3JCO1lBQ0ksT0FBTyxFQUFFLGlCQUFpQjtZQUMxQixJQUFJLEVBQUUsQ0FBQyxVQUFVLENBQUM7WUFDbEIsVUFBVSxFQUFFLFlBQVk7U0FDM0I7S0FDSjs0RkFFUSx1QkFBdUI7a0JBWm5DLFNBQVM7bUJBQUM7b0JBQ1AsUUFBUSxFQUFFLG9CQUFvQjtvQkFDOUIsT0FBTyxFQUFFLENBQUMsa0JBQWtCLENBQUM7b0JBQzdCLFNBQVMsRUFBRTt3QkFDUCxxQkFBcUI7d0JBQ3JCOzRCQUNJLE9BQU8sRUFBRSxpQkFBaUI7NEJBQzFCLElBQUksRUFBRSxDQUFDLFVBQVUsQ0FBQzs0QkFDbEIsVUFBVSxFQUFFLFlBQVk7eUJBQzNCO3FCQUNKO2lCQUNKOzswQkFHUSxNQUFNOzJCQUFDLHFCQUFxQjs7MEJBRTVCLFNBQVM7MkJBQUMsYUFBYSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7QXR0cmlidXRlLCBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIEluamVjdH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge09ic2VydmFibGV9IGZyb20gJ3J4anMnO1xuXG5pbXBvcnQge1Jlc2l6ZU9ic2VydmVyU2VydmljZX0gZnJvbSAnLi4vc2VydmljZXMvcmVzaXplLW9ic2VydmVyLnNlcnZpY2UnO1xuaW1wb3J0IHtSRVNJWkVfT1BUSU9OX0JPWCwgUkVTSVpFX09QVElPTl9CT1hfREVGQVVMVH0gZnJvbSAnLi4vdG9rZW5zL3Jlc2l6ZS1vcHRpb24tYm94JztcblxuLyoqXG4gKiBAZGVwcmVjYXRlZCBWaWV3IEVuZ2luZSBsZWdhY3lcbiAqIFRPRE86IHVzZSBhcnJvdyBmdW5jdGlvbiBmb3IgYHVzZUZhY3RvcnlgIGFuZCBkZWxldGUgdGhpcyBleHBvcnRlZCBmdW5jdGlvbiBpbiBmdXR1cmUgbWFqb3IgcmVsZWFzZVxuICovXG4vLyBUT0RPIHN3aXRjaCB0byBBdHRyaWJ1dGUgb25jZSBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyL2lzc3Vlcy8zNjQ3OSBpcyBmaXhlZFxuZXhwb3J0IGZ1bmN0aW9uIGJveEV4dHJhY3Rvcih7XG4gICAgbmF0aXZlRWxlbWVudCxcbn06IEVsZW1lbnRSZWY8RWxlbWVudD4pOiBSZXNpemVPYnNlcnZlckJveE9wdGlvbnMge1xuICAgIGNvbnN0IGF0dHJpYnV0ZSA9IG5hdGl2ZUVsZW1lbnQuZ2V0QXR0cmlidXRlKFxuICAgICAgICAnd2FSZXNpemVCb3gnLFxuICAgICkgYXMgUmVzaXplT2JzZXJ2ZXJCb3hPcHRpb25zO1xuXG4gICAgcmV0dXJuIGJveEZhY3RvcnkoYXR0cmlidXRlKTtcbn1cblxuLyoqXG4gKiBAZGVwcmVjYXRlZCBWaWV3IEVuZ2luZSBsZWdhY3lcbiAqIFRPRE86IHVzZSBhcnJvdyBmdW5jdGlvbiBmb3IgYHVzZUZhY3RvcnlgIGFuZCBkZWxldGUgdGhpcyBleHBvcnRlZCBmdW5jdGlvbiBpbiBmdXR1cmUgbWFqb3IgcmVsZWFzZVxuICovXG5leHBvcnQgZnVuY3Rpb24gYm94RmFjdG9yeShcbiAgICBib3g6IFJlc2l6ZU9ic2VydmVyQm94T3B0aW9ucyB8IG51bGwsXG4pOiBSZXNpemVPYnNlcnZlckJveE9wdGlvbnMge1xuICAgIHJldHVybiBib3ggfHwgUkVTSVpFX09QVElPTl9CT1hfREVGQVVMVDtcbn1cblxuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICdbd2FSZXNpemVPYnNlcnZlcl0nLFxuICAgIG91dHB1dHM6IFsnd2FSZXNpemVPYnNlcnZlciddLFxuICAgIHByb3ZpZGVyczogW1xuICAgICAgICBSZXNpemVPYnNlcnZlclNlcnZpY2UsXG4gICAgICAgIHtcbiAgICAgICAgICAgIHByb3ZpZGU6IFJFU0laRV9PUFRJT05fQk9YLFxuICAgICAgICAgICAgZGVwczogW0VsZW1lbnRSZWZdLFxuICAgICAgICAgICAgdXNlRmFjdG9yeTogYm94RXh0cmFjdG9yLFxuICAgICAgICB9LFxuICAgIF0sXG59KVxuZXhwb3J0IGNsYXNzIFJlc2l6ZU9ic2VydmVyRGlyZWN0aXZlIHtcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgQEluamVjdChSZXNpemVPYnNlcnZlclNlcnZpY2UpXG4gICAgICAgIHJlYWRvbmx5IHdhUmVzaXplT2JzZXJ2ZXI6IE9ic2VydmFibGU8UmVzaXplT2JzZXJ2ZXJFbnRyeVtdPixcbiAgICAgICAgQEF0dHJpYnV0ZSgnd2FSZXNpemVCb3gnKSBfYm94OiBSZXNpemVPYnNlcnZlckJveE9wdGlvbnMsXG4gICAgKSB7fVxufVxuIl19