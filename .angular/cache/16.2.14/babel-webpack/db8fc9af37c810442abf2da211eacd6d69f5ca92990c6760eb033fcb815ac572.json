{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"../draggable.directive\";\nimport * as i3 from \"../points.pipe\";\nconst _c0 = [\"hotspot\", \"\"];\nfunction HotspotComponent_ng_container_0_ng_container_1__svg_ellipse_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"ellipse\", 4);\n    i0.ɵɵlistener(\"drag\", function HotspotComponent_ng_container_0_ng_container_1__svg_ellipse_3_Template__svg_ellipse_drag_0_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r8);\n      const point_r5 = restoredCtx.$implicit;\n      const ctx_r7 = i0.ɵɵnextContext(3);\n      return i0.ɵɵresetView(ctx_r7.handlePointDrag($event, point_r5));\n    })(\"dragComplete\", function HotspotComponent_ng_container_0_ng_container_1__svg_ellipse_3_Template__svg_ellipse_dragComplete_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r8);\n      const point_r5 = restoredCtx.$implicit;\n      const ctx_r9 = i0.ɵɵnextContext(3);\n      return i0.ɵɵresetView(ctx_r9.handlePointDragComplete(point_r5));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const point_r5 = ctx.$implicit;\n    const ctx_r4 = i0.ɵɵnextContext(3);\n    i0.ɵɵattribute(\"cx\", point_r5.x)(\"cy\", point_r5.y)(\"rx\", ctx_r4.svgSize.width > 0 ? 8 / ctx_r4.svgSize.width : 0)(\"ry\", ctx_r4.svgSize.height > 0 ? 8 / ctx_r4.svgSize.height : 0);\n  }\n}\nfunction HotspotComponent_ng_container_0_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(1, \"polygon\");\n    i0.ɵɵpipe(2, \"points\");\n    i0.ɵɵtemplate(3, HotspotComponent_ng_container_0_ng_container_1__svg_ellipse_3_Template, 1, 4, \"ellipse\", 3);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"points\", i0.ɵɵpipeBind1(2, 2, ctx_r1.coords));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.coords);\n  }\n}\nfunction HotspotComponent_ng_container_0_ng_template_2__svg_ellipse_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r14 = i0.ɵɵgetCurrentView();\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"ellipse\", 4);\n    i0.ɵɵlistener(\"drag\", function HotspotComponent_ng_container_0_ng_template_2__svg_ellipse_2_Template__svg_ellipse_drag_0_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r14);\n      const point_r11 = restoredCtx.$implicit;\n      const ctx_r13 = i0.ɵɵnextContext(3);\n      return i0.ɵɵresetView(ctx_r13.handlePointDrag($event, point_r11));\n    })(\"dragComplete\", function HotspotComponent_ng_container_0_ng_template_2__svg_ellipse_2_Template__svg_ellipse_dragComplete_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r14);\n      const point_r11 = restoredCtx.$implicit;\n      const ctx_r15 = i0.ɵɵnextContext(3);\n      return i0.ɵɵresetView(ctx_r15.handlePointDragComplete(point_r11));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const point_r11 = ctx.$implicit;\n    const ctx_r10 = i0.ɵɵnextContext(3);\n    i0.ɵɵattribute(\"cx\", point_r11.x)(\"cy\", point_r11.y)(\"rx\", ctx_r10.svgSize.width > 0 ? 8 / ctx_r10.svgSize.width : 0)(\"ry\", ctx_r10.svgSize.height > 0 ? 8 / ctx_r10.svgSize.height : 0);\n  }\n}\nfunction HotspotComponent_ng_container_0_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"polygon\");\n    i0.ɵɵpipe(1, \"points\");\n    i0.ɵɵtemplate(2, HotspotComponent_ng_container_0_ng_template_2__svg_ellipse_2_Template, 1, 4, \"ellipse\", 3);\n    i0.ɵɵelement(3, \"ellipse\", 5);\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext(2);\n    i0.ɵɵattribute(\"points\", i0.ɵɵpipeBind1(1, 6, ctx_r3.previewCoords()));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r3.coords);\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"cx\", ctx_r3.previewPoint.x)(\"cy\", ctx_r3.previewPoint.y)(\"rx\", ctx_r3.svgSize.width > 0 ? 8 / ctx_r3.svgSize.width : 0)(\"ry\", ctx_r3.svgSize.height > 0 ? 8 / ctx_r3.svgSize.height : 0);\n  }\n}\nfunction HotspotComponent_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, HotspotComponent_ng_container_0_ng_container_1_Template, 4, 4, \"ng-container\", 1);\n    i0.ɵɵtemplate(2, HotspotComponent_ng_container_0_ng_template_2_Template, 4, 8, \"ng-template\", null, 2, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const _r2 = i0.ɵɵreference(3);\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r0.previewPoint)(\"ngIfElse\", _r2);\n  }\n}\nexport let HotspotComponent = /*#__PURE__*/(() => {\n  class HotspotComponent {\n    constructor(changeDetectorRef) {\n      this.changeDetectorRef = changeDetectorRef;\n      this.coords = [];\n      this.hidden = false;\n      this.selected = false;\n      this.coordsChange = new EventEmitter();\n      this.previewCoords = () => this.previewPoint ? [this.previewPoint, ...this.coords] : this.coords;\n    }\n    handlePointDrag(event, point) {\n      if (this.svgSize == null) {\n        throw new Error('svgSize is null');\n      }\n      point.x += event.deltaX / this.svgSize?.width;\n      point.y += event.deltaY / this.svgSize?.height;\n    }\n    handlePointDragComplete(point) {\n      this.coordsChange.emit(this.coords);\n    }\n    static #_ = this.ɵfac = function HotspotComponent_Factory(t) {\n      return new (t || HotspotComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: HotspotComponent,\n      selectors: [[\"g\", \"hotspot\", \"\"]],\n      hostVars: 4,\n      hostBindings: function HotspotComponent_HostBindings(rf, ctx) {\n        if (rf & 2) {\n          i0.ɵɵclassProp(\"hidden\", ctx.hidden)(\"selected\", ctx.selected);\n        }\n      },\n      inputs: {\n        coords: \"coords\",\n        hidden: \"hidden\",\n        selected: \"selected\",\n        previewPoint: \"previewPoint\",\n        svgSize: \"svgSize\"\n      },\n      outputs: {\n        coordsChange: \"coordsChange\"\n      },\n      attrs: _c0,\n      decls: 1,\n      vars: 1,\n      consts: [[4, \"ngIf\"], [4, \"ngIf\", \"ngIfElse\"], [\"previewTemplate\", \"\"], [\"draggable\", \"\", 3, \"drag\", \"dragComplete\", 4, \"ngFor\", \"ngForOf\"], [\"draggable\", \"\", 3, \"drag\", \"dragComplete\"], [1, \"preview\"]],\n      template: function HotspotComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵtemplate(0, HotspotComponent_ng_container_0_Template, 4, 2, \"ng-container\", 0);\n        }\n        if (rf & 2) {\n          i0.ɵɵproperty(\"ngIf\", ctx.svgSize);\n        }\n      },\n      dependencies: [i1.NgForOf, i1.NgIf, i2.DraggableDirective, i3.PointsPipe],\n      styles: [\"polygon[_ngcontent-%COMP%]{fill:var(--hotspot-color);fill-opacity:.35;stroke:var(--hotspot-color);stroke-opacity:.35;stroke-width:3px;vector-effect:non-scaling-stroke;transition:fill-opacity .1s}polygon[_ngcontent-%COMP%]:hover{fill-opacity:.4;stroke-opacity:.4}.hidden[_nghost-%COMP%]   polygon[_ngcontent-%COMP%], .hidden[_nghost-%COMP%]   ellipse[_ngcontent-%COMP%]{fill:transparent!important;stroke:transparent!important}.selected[_nghost-%COMP%]   polygon[_ngcontent-%COMP%]{stroke-width:7px;stroke-opacity:.45}ellipse[_ngcontent-%COMP%]{fill:var(--hotspot-color);fill-opacity:.6;stroke:var(--hotspot-color);stroke-width:1px;vector-effect:non-scaling-stroke;stroke-opacity:.8;transition:stroke-width .1s}ellipse[_ngcontent-%COMP%]:not(.preview):hover{fill-opacity:1;stroke-width:8px}ellipse.preview[_ngcontent-%COMP%]{fill-opacity:.6}\"]\n    });\n  }\n  return HotspotComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}