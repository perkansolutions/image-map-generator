{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { fromEvent } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport let DraggableDirective = /*#__PURE__*/(() => {\n  class DraggableDirective {\n    constructor() {\n      this.drag = new EventEmitter();\n      this.dragComplete = new EventEmitter();\n    }\n    onPointerDown(event) {\n      event.stopImmediatePropagation();\n      event.preventDefault();\n      this.dragConditions = {\n        startX: event.clientX,\n        startY: event.clientY,\n        prevX: event.clientX,\n        prevY: event.clientY\n      };\n      this.pointerMoveSubscription = fromEvent(document, 'pointermove').subscribe(e => this.onPointerMove(e));\n      this.pointerUpSubscription = fromEvent(document, 'pointerup').subscribe(e => this.onPointerUp(e));\n    }\n    onTouchStart(event) {\n      event.stopImmediatePropagation();\n      event.preventDefault();\n      this.dragConditions = {\n        startX: event.touches[0].clientX,\n        startY: event.touches[0].clientY,\n        prevX: event.touches[0].clientX,\n        prevY: event.touches[0].clientY\n      };\n      this.touchMoveSubscription = fromEvent(document, 'touchmove').subscribe(e => this.onTouchMove(e));\n      this.touchEndSubscription = fromEvent(document, 'touchend').subscribe(e => this.onTouchUp(e));\n    }\n    onPointerMove(event) {\n      if (!this.dragConditions) {\n        return;\n      }\n      event.stopImmediatePropagation();\n      event.preventDefault();\n      this.drag.emit({\n        totalX: event.clientX - this.dragConditions.startX,\n        totalY: event.clientY - this.dragConditions.startY,\n        deltaX: event.clientX - this.dragConditions.prevX,\n        deltaY: event.clientY - this.dragConditions.prevY\n      });\n      this.dragConditions.prevX = event.clientX;\n      this.dragConditions.prevY = event.clientY;\n    }\n    onTouchMove(event) {\n      if (!this.dragConditions) {\n        return;\n      }\n      event.stopImmediatePropagation();\n      event.preventDefault();\n      this.drag.emit({\n        totalX: event.touches[0].clientX - this.dragConditions.startX,\n        totalY: event.touches[0].clientY - this.dragConditions.startY,\n        deltaX: event.touches[0].clientX - this.dragConditions.prevX,\n        deltaY: event.touches[0].clientY - this.dragConditions.prevY\n      });\n      this.dragConditions.prevX = event.touches[0].clientX;\n      this.dragConditions.prevY = event.touches[0].clientY;\n    }\n    onPointerUp(event) {\n      if (this.dragConditions) {\n        this.dragConditions = undefined;\n        this.dragComplete.emit();\n        event.stopImmediatePropagation();\n      }\n      this.pointerMoveSubscription?.unsubscribe();\n      this.pointerUpSubscription?.unsubscribe();\n    }\n    onTouchUp(event) {\n      if (this.dragConditions) {\n        this.dragConditions = undefined;\n        this.dragComplete.emit();\n        event.stopImmediatePropagation();\n      }\n      this.touchMoveSubscription?.unsubscribe();\n      this.touchEndSubscription?.unsubscribe();\n    }\n    static #_ = this.ɵfac = function DraggableDirective_Factory(t) {\n      return new (t || DraggableDirective)();\n    };\n    static #_2 = this.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n      type: DraggableDirective,\n      selectors: [[\"\", \"draggable\", \"\"]],\n      hostBindings: function DraggableDirective_HostBindings(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵlistener(\"pointerdown\", function DraggableDirective_pointerdown_HostBindingHandler($event) {\n            return ctx.onPointerDown($event);\n          })(\"touchstart\", function DraggableDirective_touchstart_HostBindingHandler($event) {\n            return ctx.onTouchStart($event);\n          });\n        }\n      },\n      outputs: {\n        drag: \"drag\",\n        dragComplete: \"dragComplete\"\n      }\n    });\n  }\n  return DraggableDirective;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}