{"ast":null,"code":"import { InjectionToken, inject } from '@angular/core';\nimport { Observable, fromEvent } from 'rxjs';\nimport { share, startWith, map, distinctUntilChanged, shareReplay } from 'rxjs/operators';\nimport { DOCUMENT } from '@angular/common';\nconst WINDOW = new InjectionToken('An abstraction over global window object', {\n  factory: () => {\n    const {\n      defaultView\n    } = inject(DOCUMENT);\n    if (!defaultView) {\n      throw new Error('Window is not available');\n    }\n    return defaultView;\n  }\n});\nconst ANIMATION_FRAME = new InjectionToken('Shared Observable based on `window.requestAnimationFrame`', {\n  factory: () => {\n    const {\n      requestAnimationFrame,\n      cancelAnimationFrame\n    } = inject(WINDOW);\n    const animationFrame$ = new Observable(subscriber => {\n      let id = NaN;\n      const callback = timestamp => {\n        subscriber.next(timestamp);\n        id = requestAnimationFrame(callback);\n      };\n      id = requestAnimationFrame(callback);\n      return () => {\n        cancelAnimationFrame(id);\n      };\n    });\n    return animationFrame$.pipe(share());\n  }\n});\nconst CACHES = new InjectionToken('An abstraction over window.caches object', {\n  factory: () => inject(WINDOW).caches\n});\nconst CRYPTO = new InjectionToken('An abstraction over window.crypto object', {\n  factory: () => inject(WINDOW).crypto\n});\nconst CSS = new InjectionToken('An abstraction over window.CSS object', {\n  factory: () => inject(WINDOW).CSS || {\n    escape: v => v,\n    supports: () => false\n  }\n});\nconst HISTORY = new InjectionToken('An abstraction over window.history object', {\n  factory: () => inject(WINDOW).history\n});\nconst LOCAL_STORAGE = new InjectionToken('An abstraction over window.localStorage object', {\n  factory: () => inject(WINDOW).localStorage\n});\nconst LOCATION = new InjectionToken('An abstraction over window.location object', {\n  factory: () => inject(WINDOW).location\n});\nconst NAVIGATOR = new InjectionToken('An abstraction over window.navigator object', {\n  factory: () => inject(WINDOW).navigator\n});\nconst MEDIA_DEVICES = new InjectionToken('An abstraction over window.navigator.mediaDevices object', {\n  factory: () => inject(NAVIGATOR).mediaDevices\n});\nconst NETWORK_INFORMATION = new InjectionToken('An abstraction over window.navigator.connection object', {\n  // @ts-ignore\n  factory: () => inject(NAVIGATOR).connection || null\n});\nconst PAGE_VISIBILITY = new InjectionToken('Shared Observable based on `document visibility changed`', {\n  factory: () => {\n    const documentRef = inject(DOCUMENT);\n    return fromEvent(documentRef, 'visibilitychange').pipe(startWith(0), map(() => documentRef.visibilityState !== 'hidden'), distinctUntilChanged(), shareReplay({\n      refCount: false,\n      bufferSize: 1\n    }));\n  }\n});\nconst PERFORMANCE = new InjectionToken('An abstraction over window.performance object', {\n  factory: () => inject(WINDOW).performance\n});\nconst SCREEN = new InjectionToken('An abstraction over window.screen object', {\n  factory: () => inject(WINDOW).screen\n});\nconst SESSION_STORAGE = new InjectionToken('An abstraction over window.sessionStorage object', {\n  factory: () => inject(WINDOW).sessionStorage\n});\nconst SPEECH_RECOGNITION = new InjectionToken('An abstraction over SpeechRecognition class', {\n  factory: () => {\n    const windowRef = inject(WINDOW);\n    return windowRef.speechRecognition || windowRef.webkitSpeechRecognition || null;\n  }\n});\nconst SPEECH_SYNTHESIS = new InjectionToken('An abstraction over window.speechSynthesis object', {\n  factory: () => inject(WINDOW).speechSynthesis\n});\nconst USER_AGENT = new InjectionToken('An abstraction over window.navigator.userAgent object', {\n  factory: () => inject(NAVIGATOR).userAgent\n});\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ANIMATION_FRAME, CACHES, CRYPTO, CSS, HISTORY, LOCAL_STORAGE, LOCATION, MEDIA_DEVICES, NAVIGATOR, NETWORK_INFORMATION, PAGE_VISIBILITY, PERFORMANCE, SCREEN, SESSION_STORAGE, SPEECH_RECOGNITION, SPEECH_SYNTHESIS, USER_AGENT, WINDOW };\n//# sourceMappingURL=ng-web-apis-common.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}