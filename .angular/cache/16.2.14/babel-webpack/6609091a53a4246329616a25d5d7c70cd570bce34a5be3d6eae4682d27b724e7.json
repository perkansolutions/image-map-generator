{"ast":null,"code":"import { EventEmitter, afterNextRender } from '@angular/core';\nimport { Subscription, fromEvent } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"@ng-web-apis/resize-observer\";\nimport * as i3 from \"../hotspot/hotspot.component\";\nimport * as i4 from \"../draggable.directive\";\nimport * as i5 from \"../translate.directive\";\nconst _c0 = [\"svg\"];\nfunction HotspotImgComponent__svg_g_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 5);\n    i0.ɵɵlistener(\"coordsChange\", function HotspotImgComponent__svg_g_4_Template__svg_g_coordsChange_0_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r5);\n      const hotspot_r3 = restoredCtx.$implicit;\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.handleHotspotCoordsChange($event, hotspot_r3));\n    })(\"click\", function HotspotImgComponent__svg_g_4_Template__svg_g_click_0_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r5);\n      const hotspot_r3 = restoredCtx.$implicit;\n      const ctx_r6 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r6.handleHotspotClick($event, hotspot_r3));\n    })(\"drag\", function HotspotImgComponent__svg_g_4_Template__svg_g_drag_0_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r5);\n      const hotspot_r3 = restoredCtx.$implicit;\n      const ctx_r7 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r7.handleHotspotDrag($event, hotspot_r3));\n    })(\"dragComplete\", function HotspotImgComponent__svg_g_4_Template__svg_g_dragComplete_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r5);\n      const hotspot_r3 = restoredCtx.$implicit;\n      const ctx_r8 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r8.handleHotspotDragComplete(hotspot_r3));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const hotspot_r3 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"coords\", hotspot_r3.coords)(\"hidden\", !ctx_r1.editable)(\"selected\", hotspot_r3 === ctx_r1.selectedHotspot)(\"translate\", ctx_r1.translations.get(hotspot_r3))(\"svgSize\", ctx_r1.svgSize);\n  }\n}\nfunction HotspotImgComponent__svg_g_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"g\", 6);\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"coords\", ctx_r2.newHotspotCoords)(\"previewPoint\", ctx_r2.newHotspotPreviewPoint)(\"svgSize\", ctx_r2.svgSize);\n  }\n}\nconst _c1 = function (a0) {\n  return {\n    editable: a0\n  };\n};\nconst _c2 = [\"*\"];\nexport let HotspotImgComponent = /*#__PURE__*/(() => {\n  class HotspotImgComponent {\n    constructor(zone) {\n      this.zone = zone;\n      this.hotspots = [];\n      this.editable = false;\n      this.hotspotsChange = new EventEmitter();\n      this.hotspotClick = new EventEmitter();\n      this.missedClick = new EventEmitter();\n      this.selectedHotspotChange = new EventEmitter();\n      this.missedClickCount = 0;\n      this.translations = new Map();\n      this.isSingleClick = true;\n      this.subscriptions = new Subscription();\n      this.handleSvgEvents();\n    }\n    ngOnDestroy() {\n      this.subscriptions.unsubscribe();\n      this.pointerMoveSubscription?.unsubscribe();\n    }\n    completeNewHotspot() {\n      if (this.newHotspotCoords == null) {\n        return;\n      }\n      const newHotspot = {\n        coords: this.newHotspotCoords\n      };\n      this.hotspots.push(newHotspot);\n      this.hotspotsChange.emit(this.hotspots);\n      this.newHotspotCoords = undefined;\n      this.pointerMoveSubscription?.unsubscribe();\n    }\n    cancelNewHotspot() {\n      this.newHotspotCoords = undefined;\n      this.pointerMoveSubscription?.unsubscribe();\n    }\n    deleteSelectedHotspot() {\n      if (this.selectedHotspot == null || !this.editable) {\n        return;\n      }\n      const index = this.hotspots.indexOf(this.selectedHotspot);\n      if (index >= 0) {\n        this.hotspots.splice(index, 1);\n        this.hotspotsChange.emit(this.hotspots);\n      }\n      this.selectedHotspot = undefined;\n      this.selectedHotspotChange.emit(undefined);\n    }\n    handleHotspotClick(event, hotspot) {\n      event.stopImmediatePropagation();\n      this.hotspotClick.emit(hotspot);\n      this.selectedHotspot = hotspot;\n      this.selectedHotspotChange.emit(hotspot);\n    }\n    handleHotspotDrag(event, hotspot) {\n      if (this.svgSize == null) {\n        throw new Error('svgSize is null');\n      }\n      this.translations.set(hotspot, {\n        x: event.totalX / this.svgSize.width,\n        y: event.totalY / this.svgSize.height\n      });\n    }\n    handleHotspotDragComplete(hotspot) {\n      const translation = this.translations.get(hotspot);\n      if (translation == null) {\n        return;\n      }\n      for (const coord of hotspot.coords) {\n        coord.x += translation.x;\n        coord.y += translation.y;\n      }\n      this.translations.delete(hotspot);\n      this.hotspotsChange.emit(this.hotspots);\n    }\n    handleHotspotCoordsChange(coords, hotspot) {\n      hotspot.coords = coords;\n      this.hotspotsChange.emit(this.hotspots);\n    }\n    handleResize($event) {\n      this.svgSize = {\n        width: $event[0].contentRect.width,\n        height: $event[0].contentRect.height\n      };\n    }\n    beginNewHotspot(coords) {\n      this.newHotspotCoords = [coords];\n      this.newHotspotPreviewPoint = {\n        ...coords\n      };\n      if (this.pointerMoveSubscription == null || this.pointerMoveSubscription.closed) {\n        this.pointerMoveSubscription = fromEvent(this.svg.nativeElement, 'pointermove').subscribe(event => {\n          this.previewNewHotspotPoint(event);\n        });\n      }\n    }\n    handleSvgClick(event) {\n      event.stopImmediatePropagation();\n      event.preventDefault();\n      this.isSingleClick = true;\n      setTimeout(() => {\n        if (this.isSingleClick) {\n          this.handleSingleClick(event);\n        }\n      }, 50);\n    }\n    handleSvgDblClick(event) {\n      this.isSingleClick = false;\n      this.completeNewHotspot();\n    }\n    appendPointToNewHotspot(coords) {\n      if (this.newHotspotCoords == null) {\n        return;\n      }\n      this.newHotspotCoords = [...this.newHotspotCoords, coords];\n    }\n    previewNewHotspotPoint(event) {\n      if (this.newHotspotCoords == null) {\n        return;\n      }\n      if (this.svg?.nativeElement == null) {\n        throw new Error('svg element not found');\n      }\n      const width = this.svg.nativeElement.clientWidth;\n      const height = this.svg.nativeElement.clientHeight;\n      const coords = {\n        x: event.offsetX / width,\n        y: event.offsetY / height\n      };\n      if (this.newHotspotPreviewPoint == null) {\n        this.newHotspotPreviewPoint = coords;\n      } else {\n        this.newHotspotPreviewPoint.x = coords.x;\n        this.newHotspotPreviewPoint.y = coords.y;\n      }\n    }\n    handleSingleClick(event) {\n      if (!this.editable) {\n        this.missedClick.emit({\n          count: ++this.missedClickCount\n        });\n        return;\n      }\n      const naturalWidth = this.svg?.nativeElement.clientWidth;\n      const naturalHeight = this.svg?.nativeElement.clientHeight;\n      if (naturalWidth == null || naturalHeight == null) {\n        return;\n      }\n      // fallback to layerX and layerY for Firefox\n      const x = event.offsetX === 0 && event.offsetY === 0 && 'layerX' in event && Number(event.layerX) > 0 ? Number(event.layerX) : event.offsetX;\n      const y = event.offsetY === 0 && event.offsetX === 0 && 'layerY' in event && Number(event.layerY) > 0 ? Number(event.layerY) : event.offsetY;\n      const coords = {\n        x: x / naturalWidth,\n        y: y / naturalHeight\n      };\n      if (this.newHotspotCoords == null) {\n        this.beginNewHotspot(coords);\n      } else {\n        this.appendPointToNewHotspot(coords);\n      }\n    }\n    handleSvgEvents() {\n      afterNextRender(() => {\n        this.zone.run(() => {\n          if (this.svg?.nativeElement == null) {\n            throw new Error('svg element not found');\n          }\n          this.subscriptions.add(fromEvent(this.svg.nativeElement, 'click').subscribe(event => {\n            this.handleSvgClick(event);\n          }));\n          this.subscriptions.add(fromEvent(this.svg.nativeElement, 'dblclick').subscribe(event => {\n            this.handleSvgDblClick(event);\n          }));\n        });\n      });\n    }\n    static #_ = this.ɵfac = function HotspotImgComponent_Factory(t) {\n      return new (t || HotspotImgComponent)(i0.ɵɵdirectiveInject(i0.NgZone));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: HotspotImgComponent,\n      selectors: [[\"app-hotspot-img\"]],\n      viewQuery: function HotspotImgComponent_Query(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵviewQuery(_c0, 5);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.svg = _t.first);\n        }\n      },\n      hostBindings: function HotspotImgComponent_HostBindings(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵlistener(\"keydown.enter\", function HotspotImgComponent_keydown_enter_HostBindingHandler() {\n            return ctx.completeNewHotspot();\n          }, false, i0.ɵɵresolveDocument)(\"keydown.escape\", function HotspotImgComponent_keydown_escape_HostBindingHandler() {\n            return ctx.cancelNewHotspot();\n          }, false, i0.ɵɵresolveDocument)(\"keydown.delete\", function HotspotImgComponent_keydown_delete_HostBindingHandler() {\n            return ctx.deleteSelectedHotspot();\n          }, false, i0.ɵɵresolveDocument);\n        }\n      },\n      inputs: {\n        hotspots: \"hotspots\",\n        editable: \"editable\",\n        selectedHotspot: \"selectedHotspot\"\n      },\n      outputs: {\n        hotspotsChange: \"hotspotsChange\",\n        hotspotClick: \"hotspotClick\",\n        missedClick: \"missedClick\",\n        selectedHotspotChange: \"selectedHotspotChange\"\n      },\n      ngContentSelectors: _c2,\n      decls: 6,\n      vars: 5,\n      consts: [[1, \"wrapper\", 3, \"waResizeObserver\"], [\"viewBox\", \"0 0 1 1\", \"preserveAspectRatio\", \"none\", 3, \"ngClass\"], [\"svg\", \"\"], [\"hotspot\", \"\", \"draggable\", \"\", 3, \"coords\", \"hidden\", \"selected\", \"translate\", \"svgSize\", \"coordsChange\", \"click\", \"drag\", \"dragComplete\", 4, \"ngFor\", \"ngForOf\"], [\"hotspot\", \"\", 3, \"coords\", \"previewPoint\", \"svgSize\", 4, \"ngIf\"], [\"hotspot\", \"\", \"draggable\", \"\", 3, \"coords\", \"hidden\", \"selected\", \"translate\", \"svgSize\", \"coordsChange\", \"click\", \"drag\", \"dragComplete\"], [\"hotspot\", \"\", 3, \"coords\", \"previewPoint\", \"svgSize\"]],\n      template: function HotspotImgComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵprojectionDef();\n          i0.ɵɵelementStart(0, \"div\", 0);\n          i0.ɵɵlistener(\"waResizeObserver\", function HotspotImgComponent_Template_div_waResizeObserver_0_listener($event) {\n            return ctx.handleResize($event);\n          });\n          i0.ɵɵprojection(1);\n          i0.ɵɵnamespaceSVG();\n          i0.ɵɵelementStart(2, \"svg\", 1, 2);\n          i0.ɵɵtemplate(4, HotspotImgComponent__svg_g_4_Template, 1, 5, \"g\", 3);\n          i0.ɵɵtemplate(5, HotspotImgComponent__svg_g_5_Template, 1, 3, \"g\", 4);\n          i0.ɵɵelementEnd()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(3, _c1, ctx.editable));\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"ngForOf\", ctx.hotspots);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.newHotspotCoords);\n        }\n      },\n      dependencies: [i1.NgClass, i1.NgForOf, i1.NgIf, i2.ResizeObserverDirective, i3.HotspotComponent, i4.DraggableDirective, i5.TranslateDirective],\n      styles: [\"[_nghost-%COMP%]{--hotspot-color: red;display:block;overscroll-behavior:contain;-webkit-tap-highlight-color:transparent;-webkit-touch-callout:none;-webkit-user-select:none;user-select:none}*[_ngcontent-%COMP%]{box-sizing:border-box}.wrapper[_ngcontent-%COMP%]{display:inline-block;position:relative}svg[_ngcontent-%COMP%]{position:absolute;inset:0;width:100%;height:100%}svg.editable[_ngcontent-%COMP%]{cursor:pointer}[_nghost-%COMP%]     img{-webkit-user-select:none;user-select:none;display:block;pointer-events:none}\"]\n    });\n  }\n  return HotspotImgComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}